cd /home/julian/uni_folder/OTDM/OTDM_p2/OTDM/primal/
# Run AMPL with dynamically generated data
ampl <<EOF
cd /home/julian/uni_folder/OTDM/OTDM_p2/OTDM/primal/
/home/julian/uni_folder/OTDM/OTDM_p2/OTDM/ampl_linux-intel64/ampl <<EOF
# Step 1: Load the data
df <- read.csv("/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/data_formatter/mushroom_cleaned.csv")
# Step 2: Convert 'class' column to binary variable (1 and -1)
df$class <- ifelse(df$class == 1, 1, -1)
# Step 3: Remove the 'id' column
df$id <- NULL
# Step 4: Split the data into train and test sets
set.seed(123)  # For reproducibility
trainll <- sample(1:nrow(df), size = nrow(df) / 2)  # Randomly sample 50% of the rows for training
testll <- setdiff(1:nrow(df), trainll)  # The remaining rows for testing
train <- df[trainll, ]
test <- df[testll, ]
# Step 5: Normalize train data (except target)
# Identify numeric columns (excluding 'class')
numeric_cols <- names(train)[sapply(train, is.numeric) & names(train) != "class"]
# Compute min and max values for each numeric column in the training set
min_vals <- sapply(train[, numeric_cols], min, na.rm = TRUE)
max_vals <- sapply(train[, numeric_cols], max, na.rm = TRUE)
# Define normalization function
normalize <- function(x, min_val, max_val) {
(x - min_val) / (max_val - min_val)
}
# Apply normalization to the train set
for (col_name in numeric_cols) {
min_val <- min_vals[col_name]
max_val <- max_vals[col_name]
train[[col_name]] <- normalize(train[[col_name]], min_val, max_val)
}
# Step 6: Normalize test data (except target) based on the train normalizer
for (col_name in numeric_cols) {
min_val <- min_vals[col_name]
max_val <- max_vals[col_name]
test[[col_name]] <- normalize(test[[col_name]], min_val, max_val)
}
# Step 7: Display summary and row counts for train and test sets
summary(train)
cat("Number of rows in train set:", nrow(train), "\n\n")
summary(test)
cat("Number of rows in test set:", nrow(test), "\n")
train_file <- "/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/data_formatter/trm.csv"
test_file <- "/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/data_formatter/tem.csv"
write.csv(train, file = train_file, row.names = FALSE)
write.csv(test, file = test_file, row.names = FALSE)
# Step 1: Load the data
df <- read.csv("/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/data_formatter/mushroom_cleaned.csv")
# Step 2: Convert 'class' column to binary variable (1 and -1)
df$class <- ifelse(df$class == 1, 1, -1)
# Step 3: Remove the 'id' column
df$id <- NULL
# Step 4: Split the data into train and test sets
set.seed(123)  # For reproducibility
trainll <- sample(1:nrow(df), size = nrow(df) / 2)  # Randomly sample 50% of the rows for training
testll <- setdiff(1:nrow(df), trainll)  # The remaining rows for testing
train <- df[trainll, ]
test <- df[testll, ]
# Step 5: Normalize train data (except target)
# Identify numeric columns (excluding 'class')
numeric_cols <- names(train)[sapply(train, is.numeric) & names(train) != "class"]
# Compute min and max values for each numeric column in the training set
min_vals <- sapply(train[, numeric_cols], min, na.rm = TRUE)
max_vals <- sapply(train[, numeric_cols], max, na.rm = TRUE)
# Define normalization function
normalize <- function(x, min_val, max_val) {
(x - min_val) / (max_val - min_val)
}
# Apply normalization to the train set
for (col_name in numeric_cols) {
min_val <- min_vals[col_name]
max_val <- max_vals[col_name]
train[[col_name]] <- normalize(train[[col_name]], min_val, max_val)
}
# Step 6: Normalize test data (except target) based on the train normalizer
for (col_name in numeric_cols) {
min_val <- min_vals[col_name]
max_val <- max_vals[col_name]
test[[col_name]] <- normalize(test[[col_name]], min_val, max_val)
}
# Step 7: Display summary and row counts for train and test sets
summary(train)
cat("Number of rows in train set:", nrow(train), "\n\n")
summary(test)
cat("Number of rows in test set:", nrow(test), "\n")
train_file <- "/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/data_formatter/trm.csv"
test_file <- "/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/data_formatter/tem.csv"
write.csv(train, file = train_file, row.names = FALSE)
write.csv(test, file = test_file, row.names = FALSE)
