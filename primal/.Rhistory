vif_values <- vif(m1.3)
# Continuing on 1.3:
# pctwhite and percentmarried are correlated, I keep percentmarried (based on significance)
# pctblack and povertypercent are slightly correlated, I keep povertypercent
m2 <- lm(target_deathrate ~ avgdeathsperyear + incidencerate +
povertypercent + studypercap +
medianage + percentmarried + pctnohs18_24 +
pcths18_24 + pctbachdeg18_24 + pcths25_over + pctprivatecoverage
+ pctasian + pctotherrace
+ birthrate,
data = train)
vif_values <- vif(m2)
summary(m2)
m3 <- stepAIC(m2, direction = "both")
summary(m3)
m3$coefficients
par(mfrow = c(2, 2))
plot(m3)
boxcox_model <- boxcox(target_deathrate ~ incidencerate + povertypercent + medianage+ pcths18_24
+ pctbachdeg18_24 + pcths25_over + pctprivatecoverage + pctotherrace +
birthrate, data=train, lambda = seq(-2, 2, 0.1))
optimal_lambda <- boxcox_model$x[which.max(boxcox_model$y)]
cat("Optimal Lambda for the target variable:", optimal_lambda, "\n")
m4 <- lm((target_deathrate^optimal_lambda - 1)/optimal_lambda ~ incidencerate + povertypercent + medianage+ pcths18_24
+ pctbachdeg18_24 + pcths25_over + pctprivatecoverage + pctotherrace +
birthrate, data=train)
summary(m4)
# COMMENT IVAN: I'm not sure if I would use mvout in the modelling. Also, remember I created anyclinicaltrial variable, which is derived from incidencerate. Not sure if you could try/see to add that
# COMMENT nay: i tried exchnaging them but i don't see much improvement.
m5 <- lm(target_deathrate^optimal_lambda ~ incidencerate + povertypercent + medianage+ pcths18_24
+ pctbachdeg18_24 + pcths25_over + pctprivatecoverage + pctotherrace +
birthrate  + medincome_fact + mvout + state, data=train)
summary(m5)
vif(m5)
# COMMENT IVAN: The only problem I see with state is that it has quite many levels, but in my eyes this geographical info is quite insightful
cooks_dist <- cooks.distance(m5)
influential <- which(cooks_dist > 4 / nrow(train))  # Rule of thumb: 4/n
# Remove influential points and refit the model
train_clean <- train[-influential, ]
m6<- lm(target_deathrate ~ incidencerate + povertypercent + medianage+ pcths18_24
+ pctbachdeg18_24 + pcths25_over + pctprivatecoverage + pctotherrace +
birthrate + medincome_fact + mvout + state, data=train_clean)
summary(m6)
par(mfrow = c(2, 2))
plot(m6)
require(graphics)
effects_list <- allEffects(m6)
# Plot with rotated x-axis labels and scaled-down text
plot(effects_list[1:4],
multiline = TRUE,
ci.style = "bars",
xaxt = "n",  # Suppress default x-axis labels
cex.axis = 0.7,
cex.lab = 0.8,
cex.main = 0.9
)
plot(effects_list[5:8],
multiline = TRUE,
ci.style = "bars",
xaxt = "n",  # Suppress default x-axis labels
cex.axis = 0.7,
cex.lab = 0.8,
cex.main = 0.9
)
plot(effects_list[8:11],
multiline = TRUE,
ci.style = "bars",
xaxt = "n",  # Suppress default x-axis labels
cex.axis = 0.7,
cex.lab = 0.8,
cex.main = 0.9
)
library(ggeasy)
library(ggeffects)
library(ggplot2)
effect_data <- as.data.frame(effects_list[[12]])
ggplot(effect_data, aes(x = state, y = fit)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 1, size = 0.4, col='darkgoldenrod1') +  # Error bars
geom_point(size = 2, shape = 21, fill = "white", color = "steelblue4", stroke=1) +
geom_line(group = 1, col = 'steelblue4', size=0.7) +
theme(
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
plot.title = element_text(face = "bold", size = 14),
axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1, color = "black"),
axis.text.y = element_text(color = "black")
) +
labs(x = "state", y = "target_deathrate", title = "state effect plot", ) +
ggeasy::easy_center_title()
predictors <- c("incidencerate","povertypercent","medianage","pcths18_24",
"pctbachdeg18_24","pcths25_over","pctprivatecoverage","pctotherrace",
"birthrate","medianage_fact","medincome_fact","mvout","state")
# Create a data frame to store results
interaction_results <- data.frame(
Interaction = character(),
Operator = character(),
AIC = numeric(),
Adjusted_R2 = numeric(),
stringsAsFactors = FALSE
)
# Iterate through pairs of variables
for (var1 in predictors) {
for (var2 in predictors) {
if (var1 != var2) {
for (operator in c("*", "+", "-",':')) {
# Construct the formula
formula <- as.formula(paste("target_deathrate ~", var1, operator, var2))
# Fit the model
model <- tryCatch(lm(formula, data = train_clean), error = function(e) NULL)
if (!is.null(model)) {
model_aic <- AIC(model)
model_adj_r2 <- summary(model)$adj.r.squared
# Store results
interaction_results <- rbind(interaction_results, data.frame(
Interaction = paste(var1, operator, var2),
Operator = operator,
AIC = model_aic,
Adjusted_R2 = model_adj_r2
))
}
}
}
}
}
# Print the top 15 results
#print(head(top_interactions[order(-top_interactions$Adjusted_R2),], 15))
m7<- lm(target_deathrate ~  state * ( incidencerate + pctprivatecoverage + povertypercent) + medianage+ pcths18_24
+ pctbachdeg18_24 + pcths25_over  + pctotherrace +
birthrate + medincome_fact + mvout, data=train_clean)
summary(m7)
AIC(m6,m7)
# Here we include our models
models <- list(m5,m6,m7)
# Collect metrics for each model
model_metrics <- lapply(models, function(model) {
data.frame(
R2 = summary(model)$r.squared,
Adjusted_R2 = summary(model)$adj.r.squared,
AIC = AIC(model),
BIC = BIC(model),
MSE = mean(residuals(model)^2),
MAE = mean(abs(residuals(model))),
RMSE = sqrt(mean(residuals(model)^2))
)
})
# Combine into a single data frame
metrics_table <- do.call(rbind, model_metrics);metrics_table
rownames(metrics_table) <- c( 'Model 5', 'Model 6', 'Model 7') # Adjust as needed
# Generate a comparison table
kbl(metrics_table, caption = "Model Comparison Metrics", format = "latex") %>%
kable_styling(position = "center",
latex_options = c("HOLD_position"))
# If RMSE (this one is easier to interpret) is a small fraction of the range of the variance of the response, then model is doing well. In our case it is pretty big.
# Calculate RMSE fraction of response range
range_y <- range(train$target_deathrate)
# Final model chosen
final_model <- m7
test_predictions <- predict(final_model, newdata = test)
length(train)
length(train$avganncount)
calculate_outliers(train, col_data, col)
hist(train$incidencerate, breaks = 30, freq = F, xlab = "incidencerate", main = NULL)
curve(dnorm(x, mean(train$incidencerate), sd(train$incidencerate)), add = T)
numeric_vars <- train[sapply(train, is.numeric)]
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")
# Create the heatmap without dendrograms
heatmap(
cor_matrix,
col = colorRampPalette(c("blue", "white", "red"))(100), # Color gradient
scale = "none",
margins = c(10, 10),
xlab = NA,
ylab = NA,
main = "Correlation Heatmap",
Rowv = NA,
Colv = NA,
cexRow = 0.9,
cexCol = 0.9
)
n <- nrow(cor_matrix)
cell_coords <- expand.grid(x = 1:n, y = 1:n)
# Loop over each cell to add text
for (i in 1:nrow(cell_coords)) {
x <- cell_coords$x[i]
y <- cell_coords$y[i]
value <- round(cor_matrix[x, y], 2) # Round to 2 decimals
text(
x = y - 0.5, # Adjust to center the text
y = n - x + 0.5, # Reverse y-axis for heatmap positioning
labels = value,
col = "black",
cex = 0.8
)
}
numeric_vars <- train[sapply(train, is.numeric)]
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")
# Create the heatmap without dendrograms
heatmap(
cor_matrix,
col = colorRampPalette(c("blue", "white", "red"))(100), # Color gradient
scale = "none",
margins = c(10, 10),
xlab = NA,
ylab = NA,
main = "Correlation Heatmap",
Rowv = NA,
Colv = NA,
cexRow = 0.9,
cexCol = 0.9
)
for (i in 1:nrow(heatmap_data)) {
for (j in 1:ncol(heatmap_data)) {
text(j, nrow(heatmap_data) - i + 1, labels = round(heatmap_data[i, j], 2), col = "black")
}
}
numeric_vars <- train[sapply(train, is.numeric)]
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")
# Create the heatmap without dendrograms
heatmap(
cor_matrix,
col = colorRampPalette(c("blue", "white", "red"))(100), # Color gradient
scale = "none",
margins = c(10, 10),
xlab = NA,
ylab = NA,
main = "Correlation Heatmap",
Rowv = NA,
Colv = NA,
cexRow = 0.9,
cexCol = 0.9
)
n <- nrow(cor_matrix)
for (i in 1:n) {
for (j in 1:n) {
value <- round(cor_matrix[i, j], 2) # Round values to 2 decimals
# Overlay text in heatmap cells
text(j, n - i + 1, labels = value, col = "black", cex = 0.8)
}
}
numeric_vars <- train[sapply(train, is.numeric)]
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")
# Create the heatmap without dendrograms
heatmap(
cor_matrix,
col = colorRampPalette(c("blue", "white", "red"))(100), # Color gradient
scale = "none",
margins = c(10, 10),
xlab = NA,
ylab = NA,
main = "Correlation Heatmap",
Rowv = NA,
Colv = NA,
cexRow = 0.9,
cexCol = 0.9
)
axis(1, at = 1:ncol(cor_matrix), labels = colnames(cor_matrix), las = 2, cex.axis = 0.9)
axis(2, at = 1:nrow(cor_matrix), labels = rev(rownames(cor_matrix)), las = 2, cex.axis = 0.9)
# Add correlation values as text
for (i in 1:nrow(cor_matrix)) {
for (j in 1:ncol(cor_matrix)) {
text(
x = j,
y = nrow(cor_matrix) - i + 1,
labels = sprintf("%.2f", cor_matrix[i, j]),
cex = 0.7,  # Adjust the size of text
col = "black"
)
}
}
numeric_vars <- train[sapply(train, is.numeric)]
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")
image(
1:ncol(cor_matrix),
1:nrow(cor_matrix),
t(cor_matrix[nrow(cor_matrix):1, ]),  # Flip the matrix for correct orientation
col = colorRampPalette(c("blue", "white", "red"))(100),
xlab = "",
ylab = "",
main = "Correlation Heatmap",
axes = FALSE
)
# Add axis labels
axis(1, at = 1:ncol(cor_matrix), labels = colnames(cor_matrix), las = 2, cex.axis = 0.9)
axis(2, at = 1:nrow(cor_matrix), labels = rev(rownames(cor_matrix)), las = 2, cex.axis = 0.9)
# Add correlation values as text
for (i in 1:nrow(cor_matrix)) {
for (j in 1:ncol(cor_matrix)) {
text(
x = j,
y = nrow(cor_matrix) - i + 1,
labels = sprintf("%.2f", cor_matrix[i, j]),
cex = 0.7,  # Adjust the size of text
col = "black"
)
}
}
numeric_vars <- train[sapply(train, is.numeric)]
cor_matrix <- cor(numeric_vars, use = "pairwise.complete.obs")
image(
1:ncol(cor_matrix),
1:nrow(cor_matrix),
t(cor_matrix[nrow(cor_matrix):1, ]),  # Flip the matrix for correct orientation
col = colorRampPalette(c("blue", "white", "red"))(100),
xlab = "",
ylab = "",
main = "Correlation Heatmap",
axes = FALSE
)
# Add axis labels
axis(1, at = 1:ncol(cor_matrix), labels = colnames(cor_matrix), las = 2, cex.axis = 0.9)
axis(2, at = 1:nrow(cor_matrix), labels = rev(rownames(cor_matrix)), las = 2, cex.axis = 0.9)
# Add correlation values as text
for (i in 1:nrow(cor_matrix)) {
for (j in 1:ncol(cor_matrix)) {
text(
x = j,
y = nrow(cor_matrix) - i + 1,
labels = sprintf("%.2f", cor_matrix[i, j]),
cex = 0.4,  # Adjust the size of text
col = "black"
)
}
}
require(graphics)
effects_list <- allEffects(m6)
# Plot with rotated x-axis labels and scaled-down text
plot(effects_list[1:4],
multiline = TRUE,
ci.style = "bars",
xaxt = "n",  # Suppress default x-axis labels
cex.axis = 0.7,
cex.lab = 0.8,
cex.main = 0.9
)
plot(effects_list[5:8],
multiline = TRUE,
ci.style = "bars"
)
plot(effects_list[8:11],
multiline = TRUE,
ci.style = "bars"
)
effects_list <- allEffects(m6)
# Plot with rotated x-axis labels and scaled-down text
plot(effects_list[1:4],
multiline = TRUE,
ci.style = "bars"
)
plot(effects_list[5:8],
multiline = TRUE,
ci.style = "bars"
)
plot(effects_list[8:10],
multiline = TRUE,
ci.style = "bars"
)
effects_list <- allEffects(m6)
# Plot with rotated x-axis labels and scaled-down text
plot(effects_list[1:4],
multiline = TRUE,
ci.style = "bars"
)
plot(effects_list[5:8],
multiline = TRUE,
ci.style = "bars"
)
plot(effects_list[9:10],
multiline = TRUE,
ci.style = "bars"
)
info(train)
describe(train)
discribe(train)
str(train)
library(ggeasy)
library(ggeffects)
library(ggplot2)
effect_data <- as.data.frame(effects_list[[12]])
ggplot(effect_data, aes(x = state, y = fit)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 1, size = 0.4, col='darkgoldenrod1') +  # Error bars
geom_point(size = 2, shape = 21, fill = "white", color = "steelblue4", stroke=1) +
geom_line(group = 1, col = 'steelblue4', size=0.7) +
theme(
panel.background = element_blank(),
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = "black", fill=NA, size=0.5),
plot.title = element_text(face = "bold", size = 14),
axis.text.x = element_text(angle = 60, vjust = 1, hjust = 1, color = "black"),
axis.text.y = element_text(color = "black")
) +
labs(x = "state", y = "target_deathrate", title = "state effect plot", ) +
ggeasy::easy_center_title()
knitr::opts_chunk$set(echo = TRUE)
# Load the dataset
load("bikes.Washington.Rdata")
# Task 1: Estimate regression function m(instant) using cubic regression spline
library(splines)
# Fit the model using smooth.spline
smooth_spline_fit <- smooth.spline(bikes$instant, bikes$cnt, cv = TRUE)
# Extract results
lambda <- smooth_spline_fit$lambda # Chosen penalty parameter
df <- smooth_spline_fit$df         # Degrees of freedom
knots <- smooth_spline_fit$fit$nk  # Number of knots
# Print results
cat("Chosen penalty parameter (λ):", lambda, "\n")
cat("Degrees of freedom (df):", df, "\n")
cat("Number of knots:", knots, "\n")
# Plot scatter plot with the estimated regression function
plot(bikes$instant, bikes$cnt, main = "Cubic Regression Spline",
xlab = "Instant", ylab = "Count of Total Rental Bikes", pch = 19, col = "blue")
lines(smooth_spline_fit, col = "red", lwd = 2)
# Define the new variable cnt.5000
bikes$cnt_5000 <- ifelse(bikes$cnt >= 5000, 1, 0)
# Load the provided IRWLS logistic regression script (replace with the path to your script)
source("IRWLS logistic regression.R")
# Final model chosen
final_model <- m7
test_predictions <- predict(final_model, newdata = test)
m7<- lm(target_deathrate ~  state * ( incidencerate + pctprivatecoverage + povertypercent) + medianage+ pcths18_24
+ pctbachdeg18_24 + pcths25_over  + pctotherrace +
birthrate + medincome_fact + mvout, data=train_clean)
summary(m7)
AIC(m6,m7)
cooks_dist <- cooks.distance(m5)
influential <- which(cooks_dist > 4 / nrow(train))  # Rule of thumb: 4/n
# Remove influential points and refit the model
train_clean <- train[-influential, ]
m6<- lm(target_deathrate ~ incidencerate + povertypercent + medianage+ pcths18_24
+ pctbachdeg18_24 + pcths25_over + pctprivatecoverage + pctotherrace +
birthrate + medincome_fact + mvout + state, data=train_clean)
summary(m6)
par(mfrow = c(2, 2))
plot(m6)
# Here we include our models
models <- list(m5,m6,m7)
# Collect metrics for each model
model_metrics <- lapply(models, function(model) {
data.frame(
R2 = summary(model)$r.squared,
Adjusted_R2 = summary(model)$adj.r.squared,
AIC = AIC(model),
BIC = BIC(model),
MSE = mean(residuals(model)^2),
MAE = mean(abs(residuals(model))),
RMSE = sqrt(mean(residuals(model)^2))
)
})
# Combine into a single data frame
metrics_table <- do.call(rbind, model_metrics);metrics_table
rownames(metrics_table) <- c( 'Model 5', 'Model 6', 'Model 7') # Adjust as needed
# Generate a comparison table
kbl(metrics_table, caption = "Model Comparison Metrics", format = "latex") %>%
kable_styling(position = "center",
latex_options = c("HOLD_position"))
# If RMSE (this one is easier to interpret) is a small fraction of the range of the variance of the response, then model is doing well. In our case it is pretty big.
# Calculate RMSE fraction of response range
range_y <- range(train$target_deathrate)
m7<- lm(target_deathrate ~  state * (incidencerate + pctprivatecoverage + povertypercent) + medianage + pcths18_24
+ pctbachdeg18_24 + pcths25_over  + pctotherrace +
birthrate + medincome_fact + mvout, data=train_clean)
summary(m7)
AIC(m6,m7)
par(mfrow = c(2, 2))
plot(m6)
# Here we include our models
models <- list(m5,m6,m7)
# Collect metrics for each model
model_metrics <- lapply(models, function(model) {
data.frame(
R2 = summary(model)$r.squared,
Adjusted_R2 = summary(model)$adj.r.squared,
AIC = AIC(model),
BIC = BIC(model),
MSE = mean(residuals(model)^2),
MAE = mean(abs(residuals(model))),
RMSE = sqrt(mean(residuals(model)^2))
)
})
# Combine into a single data frame
metrics_table <- do.call(rbind, model_metrics);metrics_table
rownames(metrics_table) <- c( 'Model 5', 'Model 6', 'Model 7') # Adjust as needed
# Generate a comparison table
kbl(metrics_table, caption = "Model Comparison Metrics", format = "latex") %>%
kable_styling(position = "center",
latex_options = c("HOLD_position"))
# If RMSE (this one is easier to interpret) is a small fraction of the range of the variance of the response, then model is doing well. In our case it is pretty big.
# Calculate RMSE fraction of response range
range_y <- range(train$target_deathrate)
m7<- lm(target_deathrate ~  state * (incidencerate + pctprivatecoverage + povertypercent) + medianage + pcths18_24
+ pctbachdeg18_24 + pcths25_over  + pctotherrace +
birthrate + medincome_fact + mvout, data=train_clean)
summary(m7)
#AIC(m6,m7)
#par(mfrow = c(2, 2))
#plot(m6)
setwd("~/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/report")
# Chunk 1
cd /Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/primal
# Chunk 1
cd /Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/primal
getwd()
setwd("/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/primal")
# Chunk 1
cd /Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/primal
# Chunk 1
setwd("/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/primal")
/Users/danilakokin/Downloads/ampl_macos64/ampl << EOF
# Chunk 1
setwd("/Users/danilakokin/Desktop/UPC/Semester3/OTDM/OTDM_Project_2/primal")
system("/Users/danilakokin/Downloads/ampl_macos64/ampl << EOF", intern = TRUE)
option solver cplex;
